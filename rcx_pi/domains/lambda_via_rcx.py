"""
ðŸŽ¯ Lambda Calculus ENCODED in RCX-Ï€
Shows how Î»-calculus emerges from motif projections
"""

from ..core.motif import Motif, Î¼
from ..core.projection import Projection
from ..core.closure import Closure

class LambdaViaRCX:
    """Lambda calculus implemented purely through RCX-Ï€ motifs and projections"""
    
    def __init__(self):
        # Core lambda combinators as pure motifs
        self.I = Î¼("Î»", Î¼("x"), Î¼("x"))  # Identity: Î»x.x
        self.K = Î¼("Î»", Î¼("x"), Î¼("Î»", Î¼("y"), Î¼("x")))  # Constant: Î»x.Î»y.x
        self.S = Î¼("Î»", Î¼("x"), Î¼("Î»", Î¼("y"), Î¼("Î»", Î¼("z"), 
                    Î¼("app", Î¼("app", Î¼("x"), Î¼("z")), 
                           Î¼("app", Î¼("y"), Î¼("z"))))))
        
        # Boolean logic via motifs
        self.TRUE = self.K  # TRUE = K
        self.FALSE = Î¼("Î»", Î¼("x"), Î¼("Î»", Î¼("y"), Î¼("y")))  # FALSE = Î»x.Î»y.y
        
        # Church numerals as motifs
        self.ZERO = Î¼("Î»", Î¼("f"), Î¼("Î»", Î¼("x"), Î¼("x")))
        self.ONE = Î¼("Î»", Î¼("f"), Î¼("Î»", Î¼("x"), Î¼("app", Î¼("f"), Î¼("x"))))
        self.TWO = Î¼("Î»", Î¼("f"), Î¼("Î»", Î¼("x"), 
                     Î¼("app", Î¼("f"), Î¼("app", Î¼("f"), Î¼("x")))))
        
        # Projection rules for beta-reduction
        self.projections = [
            # Î²-reduction: (Î»x.M)N â†’ M[x:=N]
            Projection(
                Î¼("app", Î¼("Î»", Î¼("var", "x"), Î¼("var", "M")), Î¼("var", "N")),
                Î¼("substitute", Î¼("var", "M"), Î¼("var", "x"), Î¼("var", "N"))
            ),
            
            # I x â†’ x
            Projection(
                Î¼("app", self.I, Î¼("var", "x")),
                Î¼("var", "x")
            ),
            
            # K x y â†’ x  
            Projection(
                Î¼("app", Î¼("app", self.K, Î¼("var", "x")), Î¼("var", "y")),
                Î¼("var", "x")
            )
        ]
    
    def app(self, func, arg):
        """Application as a motif"""
        return Î¼("app", func, arg)
    
    def lambda_abs(self, var, body):
        """Lambda abstraction as a motif"""
        return Î¼("Î»", Î¼("var", var), body)
    
    def apply_projections(self, motif, max_steps=10):
        """Apply projection rules to reduce a motif"""
        current = motif
        steps = []
        
        for step in range(max_steps):
            reduced = False
            for projection in self.projections:
                result = projection.apply(current)
                if result and result != current:
                    steps.append({
                        'step': step + 1,
                        'rule': f"projection: {projection.pattern} â†’ {projection.target}",
                        'from': current,
                        'to': result
                    })
                    current = result
                    reduced = True
                    break
            
            if not reduced:
                break
        
        return current, steps
    
    def demonstrate_encoding(self):
        """Show how lambda calculus emerges from RCX-Ï€ motifs"""
        print("ðŸŽ¯ Lambda Calculus emerging from RCX-Ï€ motifs:")
        print(f"   I combinator: {self.I}")
        print(f"   K combinator: {self.K}")
        print(f"   Application: {self.app(self.I, Î¼('var', 'x'))}")
        
        # Show reduction
        expr = self.app(self.I, Î¼("const", "hello"))
        result, steps = self.apply_projections(expr)
        
        print(f"\nðŸ”¥ Reduction: {expr}")
        for step in steps:
            print(f"   Step {step['step']}: {step['from']} â†’ {step['to']}")
        print(f"   Result: {result}")

def test_lambda_via_rcx():
    """Test the lambda calculus encoding"""
    print("ðŸŽ¯ Testing Lambda Calculus via RCX-Ï€\n")
    
    lam = LambdaViaRCX()
    
    # Basic identity test
    print("ðŸ§ª Testing I combinator:")
    identity_app = lam.app(lam.I, Î¼("example"))
    result, steps = lam.apply_projections(identity_app)
    print(f"   Expression: {identity_app}")
    for step in steps:
        print(f"   {step['rule']}: {step['from']} â†’ {step['to']}")
    print(f"   Result: {result}\n")
    
    # Show that we're using pure motifs
    print("ðŸ”¬ Pure RCX-Ï€ motifs used:")
    print(f"   I = {lam.I}")
    print(f"   K = {lam.K}")
    print(f"   TRUE = {lam.TRUE}")
    print(f"   ZERO = {lam.ZERO}")

if __name__ == "__main__":
    test_lambda_via_rcx()
